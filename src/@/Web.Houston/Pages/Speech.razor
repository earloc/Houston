@page "/speech"
@inject VoiceViewModel ViewModel
@inject IPresetSource PresetSource
@implements IDisposable;

<span>
  <MatTextField @bind-Value="@_CustomText"></MatTextField>
  <MatButton OnClick="async () => await ViewModel.SayAsync(_CustomText)">Talk</MatButton>
</span>

<span>

  <MatList>
    @foreach (var text in presets)
    {
      <MatButton Label="@text" Icon="record_voice_over" OnClick="async () => await ViewModel.SayAsync(text)"></MatButton>
    }
  </MatList>



</span>

@code {
    private IEnumerable<string> presets = Enumerable.Empty<string>();

    private string _CustomText = $"{System.Environment.MachineName}, was geht ab?";

    protected override async Task OnInitializedAsync()
    {
      presets = await PresetSource.GetPresetsAsync();
      PresetSource.Changed += OnPresetSourceChanged;
    }

    private async void OnPresetSourceChanged(object? sender, EventArgs e)
    {
      presets = await PresetSource.GetPresetsAsync();
        await this.InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose() => Dispose(true);
      private bool disposedValue = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                PresetSource.Changed -= OnPresetSourceChanged;
                }
                disposedValue = true;
            }
        }
}