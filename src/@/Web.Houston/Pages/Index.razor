@page "/"
@implements IDisposable
@inject AudioControlViewModel ViewModel

<h1>Volume: @ViewModel.CurrentVolume %</h1>

<span>
  <MatCheckbox Label="mute" @bind-Checked="@ViewModel.IsMuted">
  </MatCheckbox>
  <MatSlider Label="Volume" ValueMin="@ViewModel.MinVolume"
             ValueMax="@ViewModel.MaxVolume"
             Discrete="true"
             @bind-Value="@ViewModel.CurrentVolume"
             Disabled="@ViewModel.IsMuted">
  </MatSlider>
</span>
<span>
  <MatCheckbox Label="limit" @bind-Checked="@ViewModel.IsVolumeLimitEnabled">
  </MatCheckbox>
  <MatSlider ValueMin="@ViewModel.MinVolume"
             ValueMax="@ViewModel.MaxVolume"
             Discrete="true"
             @bind-Value="@ViewModel.LimitVolume"
             Disabled="@ViewModel.IsVolumeLimitDisabled">
  </MatSlider>

  <MatButton Label="Shutdown" Icon="power_off" OnClick="() => ViewModel.Shutdown()"></MatButton>
  <MatButton Label="Cancel" Icon="power_on" OnClick="() => ViewModel.CancelShutdown()"></MatButton>
</span>

@code {

  protected override void OnInitialized()
  {
    this.ViewModel.AudioChanged += OnAudioChanged;
  }

  private void OnAudioChanged(object? sender, EventArgs e) => this.TryStateHasChanged();

  private void TryStateHasChanged()
  {
    this.InvokeAsync(() =>
    {
      try
      {
        this.StateHasChanged();
      }
      catch (ObjectDisposedException)
      {
      }
    });
  }

  public void Dispose() => Dispose(true);

  private bool disposed = false;
  private void Dispose(bool disposing)
  {
    if (disposed) return;
    if (!disposing) return;
    ViewModel.AudioChanged -= OnAudioChanged;
  }

}